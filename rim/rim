#!/usr/bin/env python3

import curses
import sys

def main(scr):
	curses.use_default_colors()

	ed = Editor(scr, sys.argv[1:])
	while ed.process_input():
		pass

class Editor:
	def __init__(self, scr, files):
		self.scr = scr
		self.scrolloff = 5

		self.buf = Buffer(self, curses.LINES - 1, curses.COLS, 0, 0)
		self.cursor = Cursor(scr)
		self.status = Status(self, scr)
		if files:
			self.buf.load_file(files[0])
		self.status.draw()
		scr.refresh()

	def process_input(self):
		k = self.scr.getkey()
		if k == 'Q':
			return False
		elif k == 'h':
			self.buf.move(0, -1)
		elif k == 'j':
			self.buf.move(1, 0)
		elif k == 'k':
			self.buf.move(-1, 0)
		elif k == 'l':
			self.buf.move(0, 1)
		else:
			try:
				k = curses.unctrl(k).decode()
			except TypeError:
				pass
			if k == '^D':
				self.buf.move(curses.LINES // 2, 0)
			elif k == '^U':
				self.buf.move(-curses.LINES // 2, 0)
			else:
				self.status.message = 'unhandled key %r' % k
				self.status.draw()
		return True

class Cursor:
	def __init__(self, scr):
		self.scr = scr
		self.y = 0
		self.x = 0

	def move(self):
		self.scr.move(self.y, self.x)

class Status:
	def __init__(self, ed, scr):
		self.ed = ed
		self.scr = scr
		self.filename = '[no file]'
		self.message = ''

	def draw(self):
		self.scr.move(curses.LINES - 1, 0)
		self.scr.clrtoeol()
		self.scr.addstr(self.filename)
		self.scr.addch(' ')
		self.scr.addstr(self.message)
		self.ed.cursor.move()

class Buffer:
	def __init__(self, ed, height, width, y, x):
		self.ed = ed
		self.height = height
		self.width = width
		self.win = ed.scr.subpad(height, width, y, x)
		self.lines = ['']
		self.first_line = self.first_col = 0
		self.pos_y = self.pos_x = 0
		self.virtual_x = 0 # used to remember x when moving y to a shorter line

	def load_file(self, path):
		try:
			with open(path, 'r') as f:
				self.lines.clear()
				for line in f:
					if line[-1] == '\n':
						line = line[:-1]
					self.lines.append(line)
			self.ed.status.filename = path
			self.redraw()
		except OSError as e:
			self.ed.status.message = str(e)

	def redraw(self):
		self.height, self.width = self.win.getmaxyx()
		for i, line in enumerate(self.lines[:self.height]):
			self.win.addstr(i, 0, line[:self.width])
		self.win.refresh()

	def move(self, y, x):
		if x:
			new_x = self.pos_x + x
			if 0 <= new_x < len(self.lines[self.pos_y]):
				self.pos_x = self.virtual_x = new_x
		else:
			new_y = self.pos_y + y
			new_y = min(max(0, new_y), len(self.lines) - 1)
			if new_y != self.pos_y:
				self.pos_y = new_y
				max_x = max(len(self.lines[self.pos_y]) - 1, 0)
				self.pos_x = min(self.virtual_x, max_x)

				# scroll down?
				scroll = (self.pos_y - self.first_line) - (self.height - self.ed.scrolloff - 1)
				if scroll > 0 and self.first_line + self.height < len(self.lines):
					# remove lines from top
					self.win.move(0, 0)
					self.win.insdelln(-scroll)
					# add lines to bottom
					self.first_line += scroll
					self.win.move(self.height - scroll, 0)
					start = self.height + self.first_line - scroll
					for i, line in enumerate(self.lines[start:start + scroll]):
						self.win.addstr(self.height - scroll + i, 0, line[:self.width])
					self.win.noutrefresh()
				else:
					# scroll up?
					scroll = self.first_line - self.pos_y + self.ed.scrolloff
					if scroll > 0 and self.first_line > 0:
						scroll = min(scroll, self.first_line)
						self.first_line -= scroll
						for line in reversed(self.lines[self.first_line:self.first_line + scroll]):
							self.win.move(0, 0)
							self.win.insertln()
							self.win.addstr(line[:self.width])
						self.win.noutrefresh()

		self.ed.cursor.y = self.pos_y - self.first_line
		self.ed.cursor.x = self.pos_x - self.first_col
		self.ed.cursor.move()

if __name__ == '__main__':
	curses.wrapper(main)
